// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OpenpathMobileAccessCore
import AWSCore
import AWSLogs
import BCryptSwift
import CommonCrypto
import CoreBluetooth
import CoreLocation
import CoreMotion
import CryptoSwift
import Dispatch
import Foundation
import JWTDecode
import LocalAuthentication
import MQTTClient
import OpenSSL
@_exported import OpenpathMobileAccessCore
import Reachability
import Security
import Swift
import SwiftSocket
import SystemConfiguration
import UserNotifications
import XCGLogger
import _Concurrency
extension Swift.String : Swift.Error {
}
extension Swift.Array {
  public func peek() -> Element?
  public func size() -> Swift.Int
  public mutating func clean()
  public mutating func enque(_ elm: Element)
  public mutating func deque() -> Element?
}
extension Swift.Array where Element : Swift.Hashable {
  public mutating func dequeUntilUnsedAndPeek(_ used: Swift.Set<Element>) -> Element?
}
public enum ResultMessage<T> {
  case failure(mssg: Swift.String, code: Swift.String)
  case success(name: Swift.String, result: T)
  public var message: [Swift.String : [Swift.String : Any]] {
    get
  }
  public var successResult: T? {
    get
  }
  public var failureResult: (message: Swift.String, code: Swift.String)? {
    get
  }
  public init?(message: [Swift.String : Any])
}
extension OpenpathMobileAccessCore.ResultMessage : Swift.Equatable {
  public static func == (lhs: OpenpathMobileAccessCore.ResultMessage<T>, rhs: OpenpathMobileAccessCore.ResultMessage<T>) -> Swift.Bool
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Equatable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
public protocol OpenpathMobileAccessCoreDelegate : AnyObject {
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onBluetoothStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onInternetStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUserSettingsSet message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onItemsSet message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onItemsUpdated message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnlockResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSyncUserResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSwitchUserResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onProvisionResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnprovisionResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onOverrideResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onTriggerLockdownPlanResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertLockdownPlanResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onLocationStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onMotionStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onLockdownPlansSet messages: [Swift.String : [Any]])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onNotificationStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSendFeedbackResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSendFeedbackRequest message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onDebug message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnlockByConnectionTypeResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertByConnectionTypeResponse message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnlockRequest message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onCredentialConfigSet message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onInitializeUserRequest message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onProtectedDataStatusChanged message: [Swift.String : Any])
  func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onAppUpdatePaused message: [Swift.String : Any])
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCoreDelegate {
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onOverrideResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onTriggerLockdownPlanResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertLockdownPlanResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onLocationStatusChanged message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onMotionStatusChanged message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onLockdownPlansSet messages: [Swift.String : [Any]])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSendFeedbackResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onSendFeedbackRequest message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onDebug message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnlockByConnectionTypeResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onRevertByConnectionTypeResponse message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onUnlockRequest message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onCredentialConfigSet message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onInitializeUserRequest message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onProtectedDataStatusChanged message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onLogoutRequest message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onAppUpdatePaused message: [Swift.String : Any])
  public func openpathMobileAccessCore(_ openpathMobileAccessCore: OpenpathMobileAccessCore.OpenpathMobileAccessCore, onNotificationStatusChanged message: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenpathMobileAccessCore : ObjectiveC.NSObject, Foundation.URLSessionDelegate, UserNotifications.UNUserNotificationCenterDelegate {
  public static let shared: OpenpathMobileAccessCore.OpenpathMobileAccessCore
  weak public var delegate: OpenpathMobileAccessCore.OpenpathMobileAccessCoreDelegate?
  public func provision(setupMobileToken: Swift.String)
  public func unlock(itemType: Swift.String, itemId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func unprovision(userOpal: Swift.String?)
  public func switchUser(userOpal: Swift.String)
  public func syncUser()
  public func softRefresh(_ includeConfigTimestamp: Swift.Bool)
  public func requestAuthorization(_ authType: Swift.String)
  public func unlockByConnectionType(connectionType: Swift.String, itemType: Swift.String, itemId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func override(itemType: Swift.String, itemId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func triggerLockdownPlan(lockdownPlanId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func revertLockdownPlan(lockdownPlanId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func revertByConnectionType(connectionType: Swift.String, itemType: Swift.String, itemId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func revert(itemType: Swift.String, itemId: Swift.Int, requestId: Swift.Int, timeout: Swift.Int)
  public func sendFeedback(subject: Swift.String, message: Swift.String)
  public func setTestMode(testMode: Swift.Int, testFrequency: Swift.Int)
  public func startUDPClient(ipAddress: Swift.String, port: Swift.Int)
  public func stopUDPClient()
  public func subscribeToNotificationActions()
  public func enableNotificationsForItem(enabled: Swift.Bool, itemType: Swift.String, itemId: Swift.Int)
  public func enableErrorNotificationsForItem(enabled: Swift.Bool, itemType: Swift.String, itemId: Swift.Int)
  @objc public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc public func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
  @objc public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
public enum AuthorizationStatusType : Swift.Int {
  case notDetermined, denied, granted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public func setLogLevel(logLevel: Swift.String) -> Swift.String
  public func logVerbose(_ message: Swift.String)
  public func logDebug(_ message: Swift.String)
  public func logInfo(_ message: Swift.String)
  public func logWarning(_ message: Swift.String)
  public func logError(_ message: Swift.String)
  public func logSevere(_ message: Swift.String)
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public func getErrors() -> [Swift.String : Any]
  public func getSdkVersion() -> [Swift.String : Any]
  public func getIsLocationOn() -> [Swift.String : Any]
  public func getAuthorizationStatuses() -> [Swift.String : Any]
  public func getUserAgent() -> [Swift.String : Any]
  public func getAppBuild() -> [Swift.String : Any]
  public func getAppVersion() -> [Swift.String : Any]
  public func getUserApiTokens() -> [Swift.String : Any]
  public func getUserAwsCredentials() -> [Swift.String : Any]
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public func getIsAutoAccountSwitchingEnabled() -> [Swift.String : Any]
  public func setIsAutoAccountSwitchingEnabled(enabled: Swift.Bool)
  public func getUserApiToken(userOpal: Swift.String) -> [Swift.String : Any]
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public func getReadersInRange(rssiThreshold: Swift.Int = 0) -> [Swift.String : Any]
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public func setRssiThreshold(connectThreshold: Swift.Int, disconnectThreshold: Swift.Int)
}
extension OpenpathMobileAccessCore.OpenpathMobileAccessCore {
  public var isStoreRelease: [Swift.String : Any] {
    get
    set
  }
}
extension OpenpathMobileAccessCore.AuthorizationStatusType : Swift.Equatable {}
extension OpenpathMobileAccessCore.AuthorizationStatusType : Swift.Hashable {}
extension OpenpathMobileAccessCore.AuthorizationStatusType : Swift.RawRepresentable {}
