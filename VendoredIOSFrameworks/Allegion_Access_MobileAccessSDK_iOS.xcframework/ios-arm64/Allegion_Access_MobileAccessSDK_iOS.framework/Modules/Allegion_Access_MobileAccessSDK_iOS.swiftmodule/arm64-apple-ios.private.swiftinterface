// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Allegion_Access_MobileAccessSDK_iOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AllegionAnalytics
import AllegionBLECore
import AllegionExtensions
import AllegionLogging
import AllegionSecurity
import AllegionTranslation
import Allegion_Access_BLECredential_iOS
import Allegion_Access_Hub_iOS
@_exported import Allegion_Access_MobileAccessSDK_iOS
import CoreBluetooth
import Foundation
import PromiseKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class AlAccessRequest : ObjectiveC.NSObject {
  @objc public init(payload: Allegion_Access_MobileAccessSDK_iOS.AlPayload)
  @objc final public let payload: Allegion_Access_MobileAccessSDK_iOS.AlPayload
  @objc deinit
}
@objc public class AlAccessResponse : ObjectiveC.NSObject {
  @objc public init(device: any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessible, state: Allegion_Access_MobileAccessSDK_iOS.AlPayloadState = .idle)
  @objc final public let state: Allegion_Access_MobileAccessSDK_iOS.AlPayloadState
  @objc final public let device: any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessible
  @objc deinit
}
@objc public protocol AlAuthenticationDelegate {
  @objc func success(_ response: Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationResponse)
  @objc func error(_ error: any Swift.Error)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlAuthenticationManager : ObjectiveC.NSObject {
  public var authenticated: (Swift.Bool, Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationResponse?) {
    get
  }
  @objc override convenience dynamic public init()
  @objc public func validate(_ request: Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationRequest, completion: any Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationDelegate)
  public func validate(_ request: Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationRequest) -> PromiseKit.Promise<Allegion_Access_MobileAccessSDK_iOS.AlAuthenticationResponse>
  @objc deinit
}
@objc public class AlAuthenticationRequest : ObjectiveC.NSObject {
  @objc final public let inviteID: Swift.String
  @objc final public let inviteSecret: Swift.String
  @objc final public let subscriptionKey: Foundation.UUID
  @objc public init(subscriptionKey: Foundation.UUID, inviteID: Swift.String, inviteSecret: Swift.String)
  @objc deinit
}
@objc public class AlAuthenticationResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(tokenID: Swift.String, accessToken: Swift.String, integrationId: Swift.String)
  @objc final public let tokenID: Swift.String
  @objc final public let accessToken: Swift.String
  @objc final public let integrationId: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class AlConfig : ObjectiveC.NSObject {
  @objc public init(subscriptionKey: Foundation.UUID)
  @objc public init(subscriptionKey: Foundation.UUID, pinSetDictionary: [Swift.String : Swift.String]?)
  @objc deinit
}
extension Allegion_Access_MobileAccessSDK_iOS.AlConfig {
  public static func == (lhs: Allegion_Access_MobileAccessSDK_iOS.AlConfig, rhs: Allegion_Access_MobileAccessSDK_iOS.AlConfig) -> Swift.Bool
}
@objc public class AlDeleteRightsRequest : ObjectiveC.NSObject {
  @objc public init(accessToken: Swift.String, rightIDs: [Foundation.UUID])
  @objc final public let rightIDs: [Foundation.UUID]
  @objc final public let accessToken: Swift.String
  @objc deinit
}
@objc public enum AlDeviceAccessError : Swift.UInt, Swift.Error, Swift.Equatable {
  case accessFailed
  case controllerNotInitialized
  case deviceCommunicationFail
  case genericError
  case invalidDevice
  case payloadTypeNotSupported
  case processFailed
  case deviceBusy
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AlDeviceAccessibleNotifications : ObjectiveC.NSObject {
  public static let credentialTimeout: Foundation.Notification.Name
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AlDeviceAccessible {
  @objc var delegate: (any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessibleDelegate)? { get set }
  @objc var deviceType: Allegion_Access_MobileAccessSDK_iOS.AlDeviceType { get set }
  @objc func sendPayload(_ payload: Allegion_Access_MobileAccessSDK_iOS.AlAccessRequest) throws
}
@objc public protocol AlDeviceAccessibleDelegate {
  @objc func onPayloadStateChange(_ response: Allegion_Access_MobileAccessSDK_iOS.AlAccessResponse?)
  @objc func onPayloadError(error: Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessError)
  @objc func onPayloadTimeout(_ response: Allegion_Access_MobileAccessSDK_iOS.AlAccessResponse?)
}
@_inheritsConvenienceInitializers @objc public class AlDeviceSearch : ObjectiveC.NSObject, Allegion_Access_MobileAccessSDK_iOS.AlDeviceSearchable, Allegion_Access_BLECredential_iOS.AlBLEScanable {
  @objc weak public var delegate: (any Allegion_Access_MobileAccessSDK_iOS.AlDeviceSearchDelegate)?
  @objc public func searchForDevices(withDuration duration: Foundation.TimeInterval = 3.0, deviceTypes: [Swift.Int]) throws
  @objc public func cancelSearch(deviceTypes: [Swift.Int]) throws
  public func onNewDeviceFound(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice)
  public func onScanStateChanged(state: AllegionBLECore.AlCentralManagerState)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AlDeviceSearchable {
  @objc func searchForDevices(withDuration duration: Foundation.TimeInterval, deviceTypes: [Swift.Int]) throws
  @objc func cancelSearch(deviceTypes: [Swift.Int]) throws
}
@objc public protocol AlDeviceSearchDelegate {
  @objc func onAccessDeviceFound(_ device: any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessible)
  @objc func onScanStateChange(_ isScanning: Swift.Bool)
}
public enum AlDeviceSearchError : Swift.UInt, Swift.Error, Swift.Equatable {
  case genericError
  case bleScanError
  case invalidDevice
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceSearchError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum AlDeviceType : Swift.Int, Swift.Codable {
  case blePlatinum
  case nfc
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AlEnrollDeviceDelegate {
  @objc func success(_ response: Allegion_Access_MobileAccessSDK_iOS.AlEnrollmentResponse)
  @objc func error(_ error: any Swift.Error)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlEnrollmentManager : ObjectiveC.NSObject {
  public var enrolled: (Swift.Bool, Allegion_Access_MobileAccessSDK_iOS.AlEnrollmentResponse?) {
    get
  }
  @objc override convenience dynamic public init()
  @objc public func enrollDevice(_ request: Allegion_Access_MobileAccessSDK_iOS.AlEnrollmentRequest, completion: any Allegion_Access_MobileAccessSDK_iOS.AlEnrollDeviceDelegate)
  public func enrollDevice(_ request: Allegion_Access_MobileAccessSDK_iOS.AlEnrollmentRequest) -> PromiseKit.Promise<Allegion_Access_MobileAccessSDK_iOS.AlEnrollmentResponse>
  @objc deinit
}
@objc public class AlEnrollmentRequest : ObjectiveC.NSObject {
  @objc public init(integrationID: Foundation.UUID, idToken: Swift.String)
  @objc final public let integrationID: Foundation.UUID
  @objc final public let idToken: Swift.String
  @objc deinit
}
@objc public class AlEnrollmentResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(deviceID: Foundation.UUID, accountID: Foundation.UUID, connectedAccountID: Foundation.UUID)
  @objc final public let deviceID: Foundation.UUID
  @objc final public let accountID: Foundation.UUID
  @objc final public let connectedAccountID: Foundation.UUID
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AlErrorCode : Swift.String {
  case deviceCommunicationFail
  case deviceNullError
  case deviceUnknownError
  case deviceInvalidRequest
  case devicePayloadFail
  case devicePayloadTimeout
  case deviceBusy
  case enrollmentInvalidIdToken
  case enrollmentInvalidIntegrationId
  case enrollmentAccountConflict
  case enrollmentDeviceEncryptionKeyError
  case enrollmentAccountConnectionError
  case mahServerError
  case mahInvalidSubscriptionKey
  case mahInvalidHeaders
  case payloadsInvalidAccessRight
  case sdkConfigurationInvalidSubscripitionKey
  case sdkStorageError
  case sdkDeviceNotRegistered
  case searchFailed
  case unsupportedDevice
  case unknownError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AlNFCDevice : ObjectiveC.NSObject, Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessible {
  @objc weak public var delegate: (any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessibleDelegate)?
  @objc public var deviceType: Allegion_Access_MobileAccessSDK_iOS.AlDeviceType
  @objc public var payloadTypes: [Swift.Int]
  @objc override dynamic public init()
  @objc public func sendPayload(_ request: Allegion_Access_MobileAccessSDK_iOS.AlAccessRequest) throws
  @objc deinit
}
@objc public class AlPayload : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(rightID: Foundation.UUID, type: Swift.String, credential: Foundation.Data, deviceID: Swift.String? = nil)
  @objc final public let rightID: Foundation.UUID
  @objc public var payloadType: Allegion_Access_MobileAccessSDK_iOS.AlPayloadType {
    @objc get
  }
  @objc final public let credential: Foundation.Data
  @objc final public let deviceID: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayload {
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc public class AlPayloadsRequest : ObjectiveC.NSObject {
  @objc public init(accessToken: Swift.String, rightID: Foundation.UUID, payloadRequests: [Allegion_Access_MobileAccessSDK_iOS.AlPayloadsRequestData], ignoreCache: Swift.Bool = false)
  @objc final public let payloadRequests: [Allegion_Access_MobileAccessSDK_iOS.AlPayloadsRequestData]
  @objc final public let accessToken: Swift.String
  @objc final public let rightID: Foundation.UUID
  @objc final public let ignoreCache: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AlPayloadsRequestData : ObjectiveC.NSObject {
  @objc public var payloadType: Swift.String?
  @objc public var propertyBag: Swift.String?
  @objc public var payLoadArgs: [Swift.String : Swift.String]?
  @objc public init(propertyBag: Swift.String?, payLoadArgs: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc public class AlPayloadsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(payloads: [Allegion_Access_MobileAccessSDK_iOS.AlPayload])
  @objc final public let payloads: [Allegion_Access_MobileAccessSDK_iOS.AlPayload]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum AlPayloadState : Swift.UInt {
  case accessFail
  case accessSuccess
  case connecting
  case connected
  case dataFail
  case dataSuccess
  case idle
  case sending
  case sessionStarted
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum AlPayloadType : Swift.Int, Swift.Codable {
  case blePlatinumNoTour
  case nfc
  case nfcNoTour
  case blePlatinum
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AlPlatinumDevice : ObjectiveC.NSObject, Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessible, Allegion_Access_BLECredential_iOS.AlPlatinumTracking {
  @objc public var peripheral: CoreBluetooth.CBPeripheral {
    @objc get
  }
  @objc weak public var delegate: (any Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessibleDelegate)?
  @objc public var deviceType: Allegion_Access_MobileAccessSDK_iOS.AlDeviceType
  @objc public var deviceTypeModel: Swift.String? {
    @objc get
  }
  @objc public var deviceTypeName: Swift.String? {
    @objc get
  }
  @objc public var name: Swift.String {
    @objc get
  }
  @objc public var advertisementName: Swift.String {
    @objc get
  }
  @objc public var payloadTypes: [Swift.Int] {
    @objc get
  }
  @objc public var serialNumber: Swift.String {
    @objc get
  }
  @objc public var services: [CoreBluetooth.CBService]? {
    @objc get
  }
  @objc public var RSSI: Foundation.NSNumber? {
    @objc get
  }
  @objc public var UUID: Foundation.UUID {
    @objc get
  }
  @objc public var isShortRange: Swift.Bool {
    @objc get
  }
  convenience public init(mobileAccessDevice: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice)
  @objc public func connect()
  @objc public func disconnect()
  @objc public func clearDeviceCache()
  @objc public func sendPayload(_ request: Allegion_Access_MobileAccessSDK_iOS.AlAccessRequest) throws
  @objc public func didConnectDevice(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice, connectionTime: Swift.Double)
  @objc public func didStartSession(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice, sessionStartTime: Swift.Double)
  @objc public func didDisconnectDevice(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice)
  @objc public func didSendPayload(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice)
  @objc public func didPayloadTimeOut()
  @objc public func didAccessSucceed(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice, connectionTime: Swift.Double, unlockTime: Swift.Double)
  @objc public func didAccessFail(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice, error: (any Swift.Error)?)
  @objc public func didDataSucceed(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice)
  @objc public func didDataFail(device: Allegion_Access_BLECredential_iOS.AlMobileAccessDevice, error: (any Swift.Error)?)
  @objc deinit
}
@objc public protocol AlPullAccessPayloadsDelegate {
  @objc func success(_ response: Allegion_Access_MobileAccessSDK_iOS.AlPayloadsResponse)
  @objc func error(_ error: Allegion_Access_MobileAccessSDK_iOS.AlRequestError)
}
@objc public protocol AlPullAccessRightsDelegate {
  @objc func success(_ response: Allegion_Access_MobileAccessSDK_iOS.AlRightsResponse)
  @objc func error(_ error: Allegion_Access_MobileAccessSDK_iOS.AlRequestError)
}
@objc public enum AlRequestError : Swift.Int, Swift.Error, Swift.Equatable {
  case accountConflictError
  case accountConnectionError
  case accountCreationError
  case configurationError
  case deviceEncryptionKeyError
  case deviceRegistrationError
  case genericError
  case invalidIdTokenError
  case invalidIntegrationIdError
  case invalidSubscriptionKeyError
  case invalidHeadersError
  case notImplementedError
  case payloadsError
  case rightsError
  case serverError
  case storageError
  case authenticationError
  case invalidInviteID
  case invalidInviteSecret
  case noTourAttributeError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension Allegion_Access_MobileAccessSDK_iOS.AlRequestError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Allegion_Access_MobileAccessSDK_iOS.AlRequestError {
  public static func == (lhs: Allegion_Access_MobileAccessSDK_iOS.AlRequestError, rhs: Allegion_Access_MobileAccessSDK_iOS.AlRequestError) -> Swift.Bool
}
@objc public protocol AlResponseEmptyDelegate {
  @objc func success()
  @objc func error(_ error: any Swift.Error)
}
@objc public class AlRight : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(id: Foundation.UUID, types: [Swift.String], attributes: [Swift.String : Swift.String]?)
  @objc final public let id: Foundation.UUID
  @objc final public let payloadTypes: [Swift.String]
  @objc final public let attributes: [Swift.String : Swift.String]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AlRightsManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func pullAccessRights(_ request: Allegion_Access_MobileAccessSDK_iOS.AlRightsRequest, completion: any Allegion_Access_MobileAccessSDK_iOS.AlPullAccessRightsDelegate)
  @objc public func validateAccessRights(_ rightIDs: [Foundation.UUID], completion: any Allegion_Access_MobileAccessSDK_iOS.AlValidateAccessRightsDelegate)
  @objc public func pullAccessPayloads(_ request: Allegion_Access_MobileAccessSDK_iOS.AlPayloadsRequest, completion: any Allegion_Access_MobileAccessSDK_iOS.AlPullAccessPayloadsDelegate)
  @objc deinit
}
@objc public class AlRightsRequest : ObjectiveC.NSObject {
  @objc public init(ignoreCache: Swift.Bool = false)
  @objc final public let ignoreCache: Swift.Bool
  @objc deinit
}
@objc public class AlRightsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(rights: [Allegion_Access_MobileAccessSDK_iOS.AlRight])
  @objc final public let rights: [Allegion_Access_MobileAccessSDK_iOS.AlRight]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AlSDKConfiguration : ObjectiveC.NSObject {
  @objc public static func setConfig(_ userConfig: Allegion_Access_MobileAccessSDK_iOS.AlConfig)
  @objc deinit
}
@objc public class AlUpdatePayloadsRequest : ObjectiveC.NSObject {
  @objc public init(accessToken: Swift.String, payloadTypes: [Swift.Int], rightIDs: [Swift.UInt])
  public init(accessToken: Swift.String, payloadTypes: [Allegion_Access_MobileAccessSDK_iOS.AlPayloadType], rightIDs: [Swift.UInt])
  @objc final public let accessToken: Swift.String
  final public let payloadTypes: [Allegion_Access_MobileAccessSDK_iOS.AlPayloadType]
  @objc final public let rightIDs: [Swift.UInt]
  @objc public func getPayloadTypes() -> [Swift.Int]
  @objc deinit
}
@objc public protocol AlValidateAccessRightsDelegate {
  @objc func success(_ response: [Foundation.UUID : Swift.Bool])
  @objc func error(_ error: Allegion_Access_MobileAccessSDK_iOS.AlRequestError)
}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessError : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessError : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceSearchError : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceSearchError : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceType : Swift.Equatable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceType : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlDeviceType : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlErrorCode : Swift.Equatable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlErrorCode : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlErrorCode : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadState : Swift.Equatable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadState : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadState : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadType : Swift.Equatable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadType : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlPayloadType : Swift.RawRepresentable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlRequestError : Swift.Hashable {}
extension Allegion_Access_MobileAccessSDK_iOS.AlRequestError : Swift.RawRepresentable {}
