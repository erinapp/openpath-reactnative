#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef ALLEGION_ACCESS_MOBILEACCESSSDK_IOS_SWIFT_H
#define ALLEGION_ACCESS_MOBILEACCESSSDK_IOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Allegion_Access_MobileAccessSDK_iOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class AlPayload;

/// Request class containing all information necessary to perform a
/// device access request
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS15AlAccessRequest")
@interface AlAccessRequest : NSObject
/// Construct a new access request
/// \param payload <code>AlPayload</code> the payload to be sent to the device
///
- (nonnull instancetype)initWithPayload:(AlPayload * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
/// <code>AlPayload</code> the payload to be sent to the device
@property (nonatomic, readonly, strong) AlPayload * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AlDeviceAccessible;
enum AlPayloadState : NSUInteger;

/// Response class containing the results of the device access
/// action and any supporting information about the request iteself
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS16AlAccessResponse")
@interface AlAccessResponse : NSObject
/// Construct a new device access response
/// \param device <code>AlDeviceAccessible</code> the device being interacted with
///
/// \param state <code>AlPayloadState</code> that the payload is in
///
- (nonnull instancetype)initWithDevice:(id <AlDeviceAccessible> _Nonnull)device state:(enum AlPayloadState)state OBJC_DESIGNATED_INITIALIZER;
/// <code>AlPayloadState</code> that the payload is in
@property (nonatomic, readonly) enum AlPayloadState state;
/// <code>AlDeviceAccessible</code> the device being interacted with
@property (nonatomic, readonly, strong) id <AlDeviceAccessible> _Nonnull device;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AlAuthenticationResponse;

/// Delegate containing the authentication response object
/// or an error that occurend during the authentication.
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS24AlAuthenticationDelegate_")
@protocol AlAuthenticationDelegate
/// successful response for authentication
/// \param response <code>AlAuthenticationResponse</code> response for authentication
///
- (void)success:(AlAuthenticationResponse * _Nonnull)response;
/// if an error occurred while trying to authenticate
/// \param error <code>Error</code> error object containg specific error
///
- (void)error:(NSError * _Nonnull)error;
@end

@class AlAuthenticationRequest;

/// Authentication manager
/// <h2>Example:</h2>
/// \code
/// guard let subscriptionKey = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let authenticationManager = AlAuthenticationManager()
/// let authenticationRequest = AlAuthenticationRequest(subscriptionKey: subscriptionKey, inviteID: "e7fe7973-1a94-ea11-86e9-281878f00ff2", inviteSecret: "955439")
///
/// class AuthenticationDelegate: AlAuthenticationDelegate {
///    func success(_ response: AlAuthenticationResponse) {
///        // Handle a successful response
///    }
///
///    func error(_ error: Error) {
///        // Handle an error response
///    }
/// }
///
/// let authenticationDelegate = AuthenticationDelegate()
/// authenticationManager.validate(authenticationRequest, completion: authenticationDelegate)
///
/// \endcodeYou should use valid Allegion provided subscription key to create authentication request.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS23AlAuthenticationManager")
@interface AlAuthenticationManager : NSObject
/// Construct a new authentication manager
- (nonnull instancetype)init;
/// Sends an authentication request to MAH.  Results are returned as <code>AlAuthenticationResponse</code> in a callback
/// \param request <code>AlAuthenticationRequest</code>            request object containing the authentication information
///
/// \param completion <code>AlAuthenticationResponse</code>      completion block called on success or error
///
- (void)validate:(AlAuthenticationRequest * _Nonnull)request completion:(id <AlAuthenticationDelegate> _Nonnull)completion;
@end

@class NSString;
@class NSUUID;

/// Request class containing all information necessary to perform a
/// authentication request
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS23AlAuthenticationRequest")
@interface AlAuthenticationRequest : NSObject
/// InviteID Unique identifier of the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull inviteID;
/// One time inviteSecret to retrieve the credential from MAH.
@property (nonatomic, readonly, copy) NSString * _Nonnull inviteSecret;
/// <code>UUID</code> Allegion provided MAH SubscriptionKey granting you api access ( Mobile Access External)
@property (nonatomic, readonly, copy) NSUUID * _Nonnull subscriptionKey;
/// Construct a authentication request
/// \param inviteID Unique identifier of the user.
///
/// \param inviteSecret One time secret code to retrieve the credential from MAH.
///
/// \param subscriptionKey subscription key to gain access to MAH
///
- (nonnull instancetype)initWithSubscriptionKey:(NSUUID * _Nonnull)subscriptionKey inviteID:(NSString * _Nonnull)inviteID inviteSecret:(NSString * _Nonnull)inviteSecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response class containing the results of the authentication
/// and any supporting information about the request iteself
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS24AlAuthenticationResponse")
@interface AlAuthenticationResponse : NSObject
/// Construct a authentication response
/// \param tokenID <code>String</code>              Token ID.
///
/// \param accessToken <code>String</code>             access Token ID.
///
/// \param integrationId <code>String</code>    integration ID.
///
- (nonnull instancetype)initWithTokenID:(NSString * _Nonnull)tokenID accessToken:(NSString * _Nonnull)accessToken integrationId:(NSString * _Nonnull)integrationId OBJC_DESIGNATED_INITIALIZER;
/// token ID
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenID;
/// access ID
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
/// integration ID
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SDK Configuration object containing all credentials necessary to access the Access APIs
/// <h2>Example:</h2>
/// \code
/// let config = AlConfig(subscriptionKey: UUID(uuidString: "ffffffff-0000-0000-0000-abcdef012345"))
///
/// AlSDKConfiguration.setConfig(config)
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS8AlConfig")
@interface AlConfig : NSObject
/// Construct configuration object
/// \param subscriptionKey <code>UUID</code>   Allegion provided MAH SubscriptionKey granting you api access
///
- (nonnull instancetype)initWithSubscriptionKey:(NSUUID * _Nonnull)subscriptionKey OBJC_DESIGNATED_INITIALIZER;
/// Construct configuration object
/// \param subscriptionKey <code>UUID</code>   Allegion provided MAH SubscriptionKey granting you api access
///
/// \param pinSetDictionary <code>[String:String]?</code>   Optional Pin Set for Certificate Pinning against servers
///
- (nonnull instancetype)initWithSubscriptionKey:(NSUUID * _Nonnull)subscriptionKey pinSetDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)pinSetDictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Request class containing all information necessary to perform a
/// delete access rights action on the server
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS21AlDeleteRightsRequest")
@interface AlDeleteRightsRequest : NSObject
/// Construct a new delete rights request
/// \param accessToken token to identify the user in MAH
///
/// \param rightIDs list of access right ids to delete
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nonnull)accessToken rightIDs:(NSArray<NSUUID *> * _Nonnull)rightIDs OBJC_DESIGNATED_INITIALIZER;
/// List of access right ids to delete
@property (nonatomic, readonly, copy) NSArray<NSUUID *> * _Nonnull rightIDs;
/// Token to identify the user in MAH
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum for error states encountered while trying to send a payload to a device
/// <ul>
///   <li>
///     <code>accessFailed</code>:                               credential failed to grant access to device
///   </li>
///   <li>
///     <code>controllerNotInitialized</code>:    BLE controller is not initialized
///   </li>
///   <li>
///     <code>deviceCommunicationFail</code>:       device communication failed
///   </li>
///   <li>
///     <code>genericError</code>:                               generic failure
///   </li>
///   <li>
///     <code>invalidDevice</code>:                             device is invalid or attempting to access an unsupported device type
///   </li>
///   <li>
///     <code>payloadTypeNotSupported</code>:       device does not support access via specified payload type
///   </li>
///   <li>
///     <code>processFailed</code>:                             data processing failed
///   </li>
///   <li>
///     <code>deviceBusy</code>:                                    device is currently busy with a previous payload
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, AlDeviceAccessError, open) {
/// credential failed to grant access to device
  AlDeviceAccessErrorAccessFailed = 0,
/// BLE controller is not initialized
  AlDeviceAccessErrorControllerNotInitialized = 1,
/// device communication failed
  AlDeviceAccessErrorDeviceCommunicationFail = 2,
/// generic failure
  AlDeviceAccessErrorGenericError = 3,
/// device is invalid or attempting to access an unsupported device type
  AlDeviceAccessErrorInvalidDevice = 4,
/// device does not support access via specified payload type
  AlDeviceAccessErrorPayloadTypeNotSupported = 5,
/// data processing failed
  AlDeviceAccessErrorProcessFailed = 6,
/// device is currently busy with a previous payload
  AlDeviceAccessErrorDeviceBusy = 7,
};
static NSString * _Nonnull const AlDeviceAccessErrorDomain = @"Allegion_Access_MobileAccessSDK_iOS.AlDeviceAccessError";

@protocol AlDeviceAccessibleDelegate;
enum AlDeviceType : NSInteger;

/// Provides functionality for granting access to a device
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS18AlDeviceAccessible_")
@protocol AlDeviceAccessible
/// Delegate that fires <code>AlDeviceAccessibleDelegate</code> events.
@property (nonatomic, strong) id <AlDeviceAccessibleDelegate> _Nullable delegate;
/// Returns the enum type that describes the device type associated with a specific payload
@property (nonatomic) enum AlDeviceType deviceType;
/// Sends a payload to a device for access.  Results are returned in onPayloadStateChange.
/// \param payload <code>AlAccessRequest</code>        payload object containing specific access right
///
- (BOOL)sendPayload:(AlAccessRequest * _Nonnull)payload error:(NSError * _Nullable * _Nullable)error;
@end


/// Delegate to handle accessing a device and the resulting credential states
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS26AlDeviceAccessibleDelegate_")
@protocol AlDeviceAccessibleDelegate
/// Callback that returns payload state changes during sending of the payload to device.
/// \param response <code>AlAccessResponse</code>   response from device after sending an access payload
///
- (void)onPayloadStateChange:(AlAccessResponse * _Nullable)response;
/// Callback that returns payload state changes during sending of the payload to device.
/// \param error <code>AlDeviceAccessError</code>   if an error occurred while trying to access the device
///
- (void)onPayloadErrorWithError:(enum AlDeviceAccessError)error;
/// Callback that returns payload timeout during the sending of payload to device.
/// \param response <code>AlAccessResponse</code>    response from device of sending an access payload
///
- (void)onPayloadTimeout:(AlAccessResponse * _Nullable)response;
@end


/// Provides access to credential timeout notifications
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS31AlDeviceAccessibleNotifications")
@interface AlDeviceAccessibleNotifications : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides functionality for access device searching
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS18AlDeviceSearchable_")
@protocol AlDeviceSearchable
/// Search for Allegion devices for a duration filter by the devices types requested.
/// \param duration <code>TimeInterval</code>        duration to search for devices, defaults to 3 seconds if not specified or <= 0
///
/// \param deviceTypes [Int]         array of devices types to filter by use raw value of <code>AlDeviceType</code>
///
///
/// throws:
/// <code>AlDeviceSearchError</code>       error thrown during device search
- (BOOL)searchForDevicesWithDuration:(NSTimeInterval)duration deviceTypes:(NSArray<NSNumber *> * _Nonnull)deviceTypes error:(NSError * _Nullable * _Nullable)error;
/// Immediately cancel the search for Allegion devices
/// \param deviceTypes [Int]   array of devices types to filter by use raw value of <code>AlDeviceType</code>
///
///
/// throws:
/// <code>AlDeviceSearchError</code>       error thrown during device search
- (BOOL)cancelSearchWithDeviceTypes:(NSArray<NSNumber *> * _Nonnull)deviceTypes error:(NSError * _Nullable * _Nullable)error;
@end

@protocol AlDeviceSearchDelegate;

/// Execute a <em>Device Search</em> to find Allegion devices that can interact with the desired credential types.  The <em>Device Name</em> is used to limit the results to devices that contain the search term.
/// <h2>Example 1 - Start Device Search:</h2>
/// \code
/// let deviceSearch = AlDeviceSearch()
///
/// class DeviceSearchDelegate: AlDeviceSearchDelegate {
///    var deviceList: [AlDeviceAccessible] = []
///
///    func onAccessDeviceFound(_ device: AlDeviceAccessible) {
///        // Handle devices that are found
///        deviceList.append(device)
///    }
///
///    func onScanStateChange(_ isScanning: Bool) {
///        // Handle scan state changes
///    }
/// }
///
/// let deviceSearchDelegate = DeviceSearchDelegate()
/// deviceSearch.delegate = deviceSearchDelegate
///
/// do {
///    try deviceSearch.searchForDevices(withDuration: 10.0, deviceTypes: [AlDeviceType.blePlatinum.rawValue])
/// } catch {
///    // Handle an error response
/// }
///
/// \endcode<h2>Example 2 - Cancel Device Search:</h2>
/// \code
/// let deviceSearch = AlDeviceSearch()
///
/// class DeviceSearchDelegate: AlDeviceSearchDelegate {
///    var deviceList: [AlDeviceAccessible] = []
///
///    func onAccessDeviceFound(_ device: AlDeviceAccessible) {
///        // Handle devices that are found
///        deviceList.append(device)
///    }
///
///    func onScanStateChange(_ isScanning: Bool) {
///        // Handle scan state changes
///    }
/// }
///
/// let deviceSearchDelegate = DeviceSearchDelegate()
/// deviceSearch.delegate = deviceSearchDelegate
///
/// do {
///    try deviceSearch.searchForDevices(withDuration: 10.0, deviceTypes: [AlDeviceType.blePlatinum.rawValue])
/// } catch {
///    // Handle an error response
/// }
///
/// do {
///    try deviceSearch.cancelSearch(deviceTypes: [AlDeviceType.blePlatinum.rawValue])
/// } catch {
///    // Handle an error response
/// }
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS14AlDeviceSearch")
@interface AlDeviceSearch : NSObject <AlDeviceSearchable>
/// Access device search delegate
@property (nonatomic, weak) id <AlDeviceSearchDelegate> _Nullable delegate;
/// Search for Allegion devices for a duration filter by the devices types requested.
/// \param duration <code>TimeInterval</code>        duration to search for devices, defaults to 3 seconds if not specified or <= 0
///
/// \param deviceTypes [Int]         array of devices types to filter by use raw value of <code>AlDeviceType</code>
///
///
/// throws:
/// <code>AlDeviceSearchError</code>       error thrown during device search
- (BOOL)searchForDevicesWithDuration:(NSTimeInterval)duration deviceTypes:(NSArray<NSNumber *> * _Nonnull)deviceTypes error:(NSError * _Nullable * _Nullable)error;
/// Immediately cancel the search for Allegion devices
/// \param deviceTypes [Int]   array of devices types to filter by use raw value of <code>AlDeviceType</code>
///
///
/// throws:
/// <code>AlDeviceSearchError</code>       error thrown during device search
- (BOOL)cancelSearchWithDeviceTypes:(NSArray<NSNumber *> * _Nonnull)deviceTypes error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate to handle receiving searched devices and handling scanning state changes
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS22AlDeviceSearchDelegate_")
@protocol AlDeviceSearchDelegate
/// Callback that returns when an Access Device is discovered.
/// Device types supported in discovery are identified in AlDeviceType.
/// \param device <code>AlAccessDevice</code>      access device found
///
- (void)onAccessDeviceFound:(id <AlDeviceAccessible> _Nonnull)device;
/// Callback that returns when the ble scan state is changed.
/// \param isScanning <code>Bool</code>            true when BLE scanning and false when not scanning
///
- (void)onScanStateChange:(BOOL)isScanning;
@end


/// Describes the type of payloads the device can accept.
/// <ul>
///   <li>
///     <code>blePlatinum</code>: Capable of receiving a platinum formed payload sent via BLE
///   </li>
///   <li>
///     <code>nfc</code>:      Capable of receiving a secured NFC payload sent via NFC
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AlDeviceType, open) {
/// Capable of receiving a platinum formed payload sent via BLE
  AlDeviceTypeBlePlatinum = 0,
/// Capable of receiving a secured NFC payload sent via NFC
  AlDeviceTypeNfc = 1,
};

@class AlEnrollmentResponse;

/// Delegate containing the enrollment response object
/// or an error that occurend during the enrollment.
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS22AlEnrollDeviceDelegate_")
@protocol AlEnrollDeviceDelegate
/// successful response for enrolling device
/// \param response <code>AlEnrollmentResponse</code> response for enrolling device
///
- (void)success:(AlEnrollmentResponse * _Nonnull)response;
/// if an error occurred while trying to pull access enroll device
/// \param error <code>Error</code> error object containg specific error
///
- (void)error:(NSError * _Nonnull)error;
@end

@class AlEnrollmentRequest;

/// Device enrollment manager
/// <h2>Example:</h2>
/// \code
/// guard let integrationID = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let enrollmentManager = AlEnrollmentManager()
/// let enrollRequest = AlEnrollmentRequest(integrationID: integrationID,
///                                        idToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c")
///
/// class EnrollDeviceDelegate: AlEnrollDeviceDelegate {
///    func success(_ response: AlEnrollmentResponse) {
///        // Handle a successful respnonse
///    }
///
///    func error(_ error: Error) {
///        // Handle an error response
///    }
/// }
///
/// let enrollDeviceDelegate = EnrollDeviceDelegate()
/// enrollmentManager.enrollDevice(enrollRequest, completion: enrollDeviceDelegate)
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS19AlEnrollmentManager")
@interface AlEnrollmentManager : NSObject
/// Construct a new enrollment manager
- (nonnull instancetype)init;
/// Sends an enrollment request to MAH.  Results are returned as <code>AlEnrollDeviceResponse</code> in a callback
/// \param request <code>AlEnrollmentRequest</code>            request object containing the enrollment information
///
/// \param completion <code>AlEnrollDeviceResponse</code>      completion block called on success or error
///
- (void)enrollDevice:(AlEnrollmentRequest * _Nonnull)request completion:(id <AlEnrollDeviceDelegate> _Nonnull)completion;
@end


/// Request class containing all information necessary to perform a
/// enrollment request
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS19AlEnrollmentRequest")
@interface AlEnrollmentRequest : NSObject
/// Construct a enrollment request
/// \param integrationID Integration ID to identify the backend credential provider.
///
/// \param idToken Unique identifier of the enrollment response.
///
- (nonnull instancetype)initWithIntegrationID:(NSUUID * _Nonnull)integrationID idToken:(NSString * _Nonnull)idToken OBJC_DESIGNATED_INITIALIZER;
/// Integration ID to identfy the backend credential provider.
@property (nonatomic, readonly, copy) NSUUID * _Nonnull integrationID;
/// Unique identifier of the enrollment response.
@property (nonatomic, readonly, copy) NSString * _Nonnull idToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response class containing the results of the enrolling a device
/// action and any supporting information about the request iteself
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS20AlEnrollmentResponse")
@interface AlEnrollmentResponse : NSObject
/// Construct a new enrollment accountID
/// \param deviceID <code>UUID</code>              enrolled device ID.
///
/// \param accountID <code>UUID</code>             enrolled account ID.
///
/// \param connectedAccountID <code>UUID</code>    enrolled connected account ID.
///
- (nonnull instancetype)initWithDeviceID:(NSUUID * _Nonnull)deviceID accountID:(NSUUID * _Nonnull)accountID connectedAccountID:(NSUUID * _Nonnull)connectedAccountID OBJC_DESIGNATED_INITIALIZER;
/// enrolled device ID
@property (nonatomic, readonly, copy) NSUUID * _Nonnull deviceID;
/// enrolled account ID
@property (nonatomic, readonly, copy) NSUUID * _Nonnull accountID;
/// enrolled connected account ID
@property (nonatomic, readonly, copy) NSUUID * _Nonnull connectedAccountID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A NFC device that accepts access credentials
/// <h2>Example:</h2>
/// \code
/// class AccessDelegate: AlDeviceAccessibleDelegate {
///    func onPayloadStateChange(_ response: AlAccessResponse?) {
///        // Handle payload state changes
///    }
///
///    func onPayloadError(error: AlDeviceAccessError) {
///        // Handle payload error changes
///    }
///
///    func onPayloadTimeout(_ response: AlAccessResponse?) {
///        // Handle timeout
///    }
/// }
///
/// let accessDelegate = AccessDelegate()
/// nfcDevice.delegate = accessDelegate
///
/// guard let rightID = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let accessRequest = AlAccessRequest(
///    payload: AlPayload(
///        rightID: rightID,
///        type: "NFC",
///        credential: Data([0x00, 0x68, 0x53, 0x24, 0x0B, 0x00 ... 0x4D])
///    )
/// )
///
/// do {
///    try nfcDevice.sendPayload(accessRequest)
/// } catch {
///    // Handle an error response
/// }
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS11AlNFCDevice")
@interface AlNFCDevice : NSObject <AlDeviceAccessible>
/// Delegate that fires <code>AlDeviceAccessibleDelegate</code> events.
@property (nonatomic, weak) id <AlDeviceAccessibleDelegate> _Nullable delegate;
/// Returns the enum type that describes the device type associated with a specific payload.
@property (nonatomic) enum AlDeviceType deviceType;
/// Returns the enum types that describe the payload types supported by this device
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull payloadTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sends a payload to a device for access.  Results are returned in onPayloadStateChange.
/// \param request <code>AlAccessRequest</code>        request object containing an access payload
///
- (BOOL)sendPayload:(AlAccessRequest * _Nonnull)request error:(NSError * _Nullable * _Nullable)error;
@end

@class NSData;
enum AlPayloadType : NSInteger;

/// Data class containing the access payload information. Conforms to
/// <code>Codable</code> to facilitate storing and retrieving credentials.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS9AlPayload")
@interface AlPayload : NSObject
/// Construct a new access payload
/// \param rightID unique id for parent access right <code>AlRight.id</code>
///
/// \param type <code>String</code> for access payload
///
/// \param credential access payload credential allowing for access to devices
///
/// \param deviceID <code>String?</code> device identifier, defaults to nil if not provided
///
- (nonnull instancetype)initWithRightID:(NSUUID * _Nonnull)rightID type:(NSString * _Nonnull)type credential:(NSData * _Nonnull)credential deviceID:(NSString * _Nullable)deviceID OBJC_DESIGNATED_INITIALIZER;
/// unique id for parent access right <code>AlRight.id</code>
@property (nonatomic, readonly, copy) NSUUID * _Nonnull rightID;
/// <code>AlPayloadType</code> for access payload
@property (nonatomic, readonly) enum AlPayloadType payloadType;
/// access payload credential allowing for access to devices
@property (nonatomic, readonly, copy) NSData * _Nonnull credential;
/// device identifier of device associated with the payload
@property (nonatomic, readonly, copy) NSString * _Nullable deviceID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AlPayload (SWIFT_EXTENSION(Allegion_Access_MobileAccessSDK_iOS))
/// Returns a hash for the AlPayload
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a boolean indicating whether the AlPayloads are equal
/// \param object <code>Any?</code> AlPayload to compare current payload with
///
///
/// returns:
/// <code>Bool</code> true if AlPayload properties are equal, false if not
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes the state that the payload is in.
/// <ul>
///   <li>
///     <code>accessFail</code>:         Edge device has failed to grant access to the payload
///   </li>
///   <li>
///     <code>accessSuccess</code>:      Edge device has granted access to the payload
///   </li>
///   <li>
///     <code>connected</code>:          Connected to an edge device
///   </li>
///   <li>
///     <code>connecting</code>:         Connecting to an edge device
///   </li>
///   <li>
///     <code>dataFail</code>:       Sending non-credential data has failed
///   </li>
///   <li>
///     <code>dataSuccess</code>: Sending non-credential data has succeeded
///   </li>
///   <li>
///     <code>idle</code>:               Idle and not performing any action
///   </li>
///   <li>
///     <code>sending</code>:            Sending the payload to an edge device
///   </li>
///   <li>
///     <code>sessionStarted</code>:     Session has been started with an edge device
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, AlPayloadState, open) {
/// Edge device has failed to grant access to the payload
  AlPayloadStateAccessFail = 0,
/// Edge device has granted access to the payload
  AlPayloadStateAccessSuccess = 1,
/// Connecting to an edge device
  AlPayloadStateConnecting = 2,
/// Connecting to an edge device
  AlPayloadStateConnected = 3,
/// Sending non-credential data has failed
  AlPayloadStateDataFail = 4,
/// Sending non-credential data has succeeded
  AlPayloadStateDataSuccess = 5,
/// Idle and not performing any action
  AlPayloadStateIdle = 6,
/// Sending the payload to an edge device
  AlPayloadStateSending = 7,
/// Session has been started with an edge device
  AlPayloadStateSessionStarted = 8,
};

/// Describes the type of payloads
/// <ul>
///   <li>
///     <code>blePlatinumNoTour</code>: A platinum formed no tour payload sent via BLE
///   </li>
///   <li>
///     <code>nfc</code>:  A secured NFC payload sent via NFC
///   </li>
///   <li>
///     <code>nfcNoTour</code>: A secured no tour payload sent via NFC
///   </li>
///   <li>
///     <code>blePlatinum</code>: A platinum formed payload sent via BLE
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AlPayloadType, open) {
/// A platinum formed no tour payload sent via BLE
  AlPayloadTypeBlePlatinumNoTour = 0,
/// A secured NFC payload sent via NFC
  AlPayloadTypeNfc = 1,
/// A secured no tour payload sent via NFC
  AlPayloadTypeNfcNoTour = 2,
/// A platinum formed payload sent via BLE
  AlPayloadTypeBlePlatinum = 3,
};

@class AlPayloadsRequestData;

/// Request class containing all information necessary to perform a
/// pull/update access payloads action on the server
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS17AlPayloadsRequest")
@interface AlPayloadsRequest : NSObject
/// Construct a new payloads request
/// \param accessToken Token to identify the user in MAH
///
/// \param rightID The identifier of the right associated with the desired payload.
///
/// \param payloadRequests ‘AlPayloadsRequestData’ Array of payloads to be requested
///
/// \param ignoreCache <code>Bool</code> Ignore cached payloads and pull from server
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nonnull)accessToken rightID:(NSUUID * _Nonnull)rightID payloadRequests:(NSArray<AlPayloadsRequestData *> * _Nonnull)payloadRequests ignoreCache:(BOOL)ignoreCache OBJC_DESIGNATED_INITIALIZER;
/// Payloads being requsted
@property (nonatomic, readonly, copy) NSArray<AlPayloadsRequestData *> * _Nonnull payloadRequests;
/// Token to identify the user in MAH
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
/// The identifier of the right associated with the desired payload.
@property (nonatomic, readonly, copy) NSUUID * _Nonnull rightID;
/// Ignore cached payloads and pull from server.
@property (nonatomic, readonly) BOOL ignoreCache;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS21AlPayloadsRequestData")
@interface AlPayloadsRequestData : NSObject
@property (nonatomic, copy) NSString * _Nullable payloadType;
@property (nonatomic, copy) NSString * _Nullable propertyBag;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable payLoadArgs;
/// Init values for the payloads to be requested
/// \param propertyBag values required for mobileDevicePropteryBags
///
/// \param payLoadArgs values required for payloadArgs
///
- (nonnull instancetype)initWithPropertyBag:(NSString * _Nullable)propertyBag payLoadArgs:(NSDictionary<NSString *, NSString *> * _Nullable)payLoadArgs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response class containing the results of a pull/update access payloads
/// action and any supporting information about the request itself
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS18AlPayloadsResponse")
@interface AlPayloadsResponse : NSObject
/// Construct a new payloads response
/// \param payloads An array of payloads [<code>AlPayload</code>] returned from MAH to send to edge devices
///
- (nonnull instancetype)initWithPayloads:(NSArray<AlPayload *> * _Nonnull)payloads OBJC_DESIGNATED_INITIALIZER;
/// An array of payloads [<code>AlPayload</code>] returned from MAH to send to edge devices
@property (nonatomic, readonly, copy) NSArray<AlPayload *> * _Nonnull payloads;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class CBService;
@class NSNumber;
@class AlMobileAccessDevice;

/// A BLE device that accepts platinum level credentials
/// <h2>Example Send:</h2>
/// \code
/// class AccessDelegate: AlDeviceAccessibleDelegate {
///    func onPayloadStateChange(_ response: AlAccessResponse?) {
///        // Handle payload state changes
///    }
///
///    func onPayloadError(error: AlDeviceAccessError) {
///        // Handle payload error changes
///    }
///
///    func onPayloadTimeout(_ response: AlAccessResponse?) {
///        // Handle timeout
///    }
/// }
///
/// let accessDelegate = AccessDelegate()
/// platinumDevice.delegate = accessDelegate // The platinumDevice is returned from a device search.
///
/// guard let rightID = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let accessRequest = AlAccessRequest(
///    payload: AlPayload(
///        rightID: rightID,
///        type: "BLE_Platinum",
///        credential: Data([0x00, 0x68, 0x53, 0x24, 0x0B, 0x00 ... 0x4D]) // This is sample data and won't compile.
///    )
/// )
///
/// do {
///    try platinumDevice.sendPayload(accessRequest) // The platinumDevice is returned from a device search.
/// } catch {
///    // Handle an error response
/// }
///
/// \endcode<h2>Example Connect then send:</h2>
/// \code
/// class AccessDelegate: AlDeviceAccessibleDelegate {
///    func onPayloadStateChange(_ response: AlAccessResponse?) {
///        // Handle payload state changes
///        if response != nil && response!.state == .connected {
///            platinumDevice.sendPayload(accessRequest) // The platinumDevice is returned from a device search.
///        }
///    }
///
///    func onPayloadError(error: AlDeviceAccessError) {
///        // Handle payload error changes
///    }
///
///    func onPayloadTimeout(_ response: AlAccessResponse?) {
///        // Handle timeout
///    }
/// }
///
/// let accessDelegate = AccessDelegate()
/// platinumDevice.delegate = accessDelegate // The platinumDevice is returned from a device search.
///
/// guard let rightID = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let accessRequest = AlAccessRequest(
///    payload: AlPayload(
///        rightID: rightID,
///        type: "BLE_Platinum",
///        credential: Data([0x00, 0x68, 0x53, 0x24, 0x0B, 0x00 ... 0x4D]) // This is sample data and won't compile.
///    )
/// )
///
/// do {
///    try platinumDevice.connect() // The platinumDevice is returned from a device search.
/// } catch {
///    // Handle an error response
/// }
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS16AlPlatinumDevice")
@interface AlPlatinumDevice : NSObject <AlDeviceAccessible>
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
/// Delegate that fires <code>AlDeviceAccessibleDelegate</code> events
@property (nonatomic, weak) id <AlDeviceAccessibleDelegate> _Nullable delegate;
/// Returns the enum type that describes the device type associated with a specific payload
@property (nonatomic) enum AlDeviceType deviceType;
/// Returns the device type model
@property (nonatomic, readonly, copy) NSString * _Nullable deviceTypeModel;
/// Returns the device type name
@property (nonatomic, readonly, copy) NSString * _Nullable deviceTypeName;
/// Returns the name of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Returns the advertisement name of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull advertisementName;
/// Returns the enum type that describes the payload types associated with a specific device
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull payloadTypes;
/// Returns the CoreBluetooth serial number of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// Returns the services of the device
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nullable services;
/// Returns the RSSI value of the device
@property (nonatomic, readonly, strong) NSNumber * _Nullable RSSI;
/// Returns the CoreBluetooth temporary identifier of the device
@property (nonatomic, readonly, copy) NSUUID * _Nonnull UUID;
/// Returns true if the device is restricted to short range connections, false otherwise.
@property (nonatomic, readonly) BOOL isShortRange;
/// Connects to device
- (void)connect;
/// Disconnects from device
- (void)disconnect;
/// Clears the device cache.
- (void)clearDeviceCache;
/// Sends a payload to a device for access.  Results are returned in <em>onPayloadStateChange</em>.
/// \param request <code>AlAccessRequest</code>        request object containing an access payload
///
- (BOOL)sendPayload:(AlAccessRequest * _Nonnull)request error:(NSError * _Nullable * _Nullable)error;
/// Called when device is connected.
/// \param device <code>AlMobileAccessDevice</code> device connected
///
/// \param connectionTime <code>Double</code>  time to connect to the device
///
- (void)didConnectDeviceWithDevice:(AlMobileAccessDevice * _Nonnull)device connectionTime:(double)connectionTime;
/// Called when session is started.
/// \param device <code>AlMobileAccessDevice</code> device session started for
///
/// \param sessionStartTime <code>Double</code> time session was started
///
- (void)didStartSessionWithDevice:(AlMobileAccessDevice * _Nonnull)device sessionStartTime:(double)sessionStartTime;
/// Called when device disconnected.
/// \param device <code>AlMobileAccessDevice</code> device disconnected
///
- (void)didDisconnectDeviceWithDevice:(AlMobileAccessDevice * _Nonnull)device;
/// Called when payload is sent successfully.
/// \param device <code>AlMobileAccessDevice</code> device payload was successfully sent to
///
- (void)didSendPayloadWithDevice:(AlMobileAccessDevice * _Nonnull)device;
/// Called when payload times out.
/// Updates analytics values, forwards payload tiimeout and state change to delegate, resets payload state and disconnects device.
- (void)didPayloadTimeOut;
/// Called when access succeeds on the device. Updates analytics and resets the payload state.
/// \param device <code>AlMobileAccessDevice</code> device access succeeded for
///
/// \param connectionTime <code>Double</code> connection time
///
/// \param unlockTime <code>Double</code> unlock time
///
- (void)didAccessSucceedWithDevice:(AlMobileAccessDevice * _Nonnull)device connectionTime:(double)connectionTime unlockTime:(double)unlockTime;
/// Called when access fails.
/// \param device <code>AlMobileAccessDevice</code> device access failed for
///
/// \param error <code>Error?</code> error describing the reason for access failure
///
- (void)didAccessFailWithDevice:(AlMobileAccessDevice * _Nonnull)device error:(NSError * _Nullable)error;
/// Called when sending data to the device succeeds. Receiving this callback indicates a No Tour payload was sent successfully.
/// \param device <code>AlMobileAccessDevice</code> device data was successfully sent to
///
- (void)didDataSucceedWithDevice:(AlMobileAccessDevice * _Nonnull)device;
/// Called when sending data to the device fails. Receiving this callback indicates sending a No Tour payload failed.
/// \param device <code>AlMobileAccessDevice</code> device that failed to receive data
///
/// \param error <code>Error?</code> error describing the reason for data failure
///
- (void)didDataFailWithDevice:(AlMobileAccessDevice * _Nonnull)device error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AlRequestError : NSInteger;

/// Delegate that contains a list of access payloads or an error if a problem
/// is encountered while trying to pull payloads from the server.
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS28AlPullAccessPayloadsDelegate_")
@protocol AlPullAccessPayloadsDelegate
/// successful response containing a list of access payloads
/// \param response <code>AlPayloadsResponse</code> response object for access payloads
///
- (void)success:(AlPayloadsResponse * _Nonnull)response;
/// if an error occurred while trying to pull access payloads
/// \param error <code>AlRequestError</code> error object containg specific error
///
- (void)error:(enum AlRequestError)error;
@end

@class AlRightsResponse;

/// Delegate that contains a list of access rights or an error if a problem
/// is encoutered while trying to access rights from the server.
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS26AlPullAccessRightsDelegate_")
@protocol AlPullAccessRightsDelegate
/// successful response containing a list of access rights
/// \param response <code>AlRightsResponse</code> response object for access rights
///
- (void)success:(AlRightsResponse * _Nonnull)response;
/// if an error occurred while trying to pull access rights
/// \param error <code>AlRequestError</code> error object containg specific error
///
- (void)error:(enum AlRequestError)error;
@end

/// Enum for error states encountered while trying to manage access rights
/// and payloads
/// <ul>
///   <li>
///     <code>genericError</code>:                   generic failure while contacting server
///   </li>
///   <li>
///     <code>payloadsError</code>:                  failed to retrieve access payloads
///   </li>
///   <li>
///     <code>rightsError</code>:                    failed to retrieve access rights
///   </li>
///   <li>
///     <code>storageError</code>:                   failed to retrieve/store access rights and payloads
///   </li>
///   <li>
///     <code>invalidParameterError</code>:          invalid param used in sdk action
///   </li>
///   <li>
///     <code>configurationError</code>:             failure if configuration is invalid or subscription key not set
///   </li>
///   <li>
///     <code>accountConflictError</code>:           account already exists, restart the enrollment process
///   </li>
///   <li>
///     <code>accountConnectionError</code>:         unable to create connected account
///   </li>
///   <li>
///     <code>accountCreationError</code>:           unable to create account
///   </li>
///   <li>
///     <code>deviceEncryptionKeyError</code>:       device encryption failed or device keys are invalid
///   </li>
///   <li>
///     <code>deviceRegistrationError</code>:        unable to register device
///   </li>
///   <li>
///     <code>invalidIdTokenError</code>:            invalid access token
///   </li>
///   <li>
///     <code>invalidIntegrationIdError</code>:      invalid integration id
///   </li>
///   <li>
///     <code>invalidSubscriptionKeyError</code>:    invalid subscription key
///   </li>
///   <li>
///     <code>serverError</code>:                    server error
///   </li>
///   <li>
///     <code>authenticationError</code>:    failed to retrieve tokens
///   </li>
///   <li>
///     <code>invalidInviteID</code>:   invalid invite id
///   </li>
///   <li>
///     <code>invalidInviteSecret</code>:  invalid invite secret
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AlRequestError, open) {
  AlRequestErrorAccountConflictError = 0,
  AlRequestErrorAccountConnectionError = 1,
  AlRequestErrorAccountCreationError = 2,
  AlRequestErrorConfigurationError = 3,
  AlRequestErrorDeviceEncryptionKeyError = 4,
  AlRequestErrorDeviceRegistrationError = 5,
  AlRequestErrorGenericError = 6,
  AlRequestErrorInvalidIdTokenError = 7,
  AlRequestErrorInvalidIntegrationIdError = 8,
  AlRequestErrorInvalidSubscriptionKeyError = 9,
  AlRequestErrorInvalidHeadersError = 10,
  AlRequestErrorNotImplementedError = 11,
  AlRequestErrorPayloadsError = 12,
  AlRequestErrorRightsError = 13,
  AlRequestErrorServerError = 14,
  AlRequestErrorStorageError = 15,
  AlRequestErrorAuthenticationError = 16,
  AlRequestErrorInvalidInviteID = 17,
  AlRequestErrorInvalidInviteSecret = 18,
  AlRequestErrorNoTourAttributeError = 19,
};
static NSString * _Nonnull const AlRequestErrorDomain = @"Allegion_Access_MobileAccessSDK_iOS.AlRequestError";


/// Delegate that represents the success or failure of a particular request. This type of response
/// contains no data but instead indicates completion on success or an error if a problem was
/// encountered during the request
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS23AlResponseEmptyDelegate_")
@protocol AlResponseEmptyDelegate
/// successfully completed request
- (void)success;
/// if an error occurred while trying to complete the request
/// \param error <code>Error</code> request error enum
///
- (void)error:(NSError * _Nonnull)error;
@end


/// Data class containing the access right information. Conforms to
/// <code>Codable</code> to facilitate serialization.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS7AlRight")
@interface AlRight : NSObject
/// Construct a new access right
/// \param id unique identifier for access right
///
/// \param payloadTypes array of payload types
///
- (nonnull instancetype)initWithId:(NSUUID * _Nonnull)id types:(NSArray<NSString *> * _Nonnull)types attributes:(NSDictionary<NSString *, NSString *> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
/// unique identifier for access right
@property (nonatomic, readonly, copy) NSUUID * _Nonnull id;
/// types of payloads
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull payloadTypes;
/// attributes associated with right - Site Name, Site ID
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable attributes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AlRightsRequest;
@protocol AlValidateAccessRightsDelegate;

/// Access rights manager - provides the functionality to pull/update access rights and payloads.
/// <h2>Example 1 - Pull Rights:</h2>
/// \code
/// let accessRequest = AlRightsRequest(ignoreCache: true)
///
/// class AccessRightsDelegate: AlPullAccessRightsDelegate {
///    func success(_ response: AlRightsResponse) {
///        // Handle a successful response
///    }
///
///    func error(_ error: AlRequestError) {
///        // Handle an error response
///    }
/// }
///
/// let rightsDelegate = AccessRightsDelegate()
/// let rightsManager = AlRightsManager()
/// rightsManager.pullAccessRights(accessRequest, completion: rightsDelegate)
///
/// \endcode<h2>Example 2 - Validate Rights:</h2>
/// \code
/// guard let rightID1 = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
/// guard let rightID2 = UUID(uuidString: "12345678-1234-1234-1234-1234567890ab") else {
///    // Handle UUID construction error
/// }
/// let rightIDs = [rightID1, rightID2]
///
/// class AccessRightsDelegate: AlValidateAccessRightsDelegate {
///    func success(_ response: [UUID: Bool]) {
///        // Handle a successful response
///    }
///
///    func error(_ error: AlRequestError) {
///        // Handle an error response
///    }
/// }
///
/// let rightsDelegate = AccessRightsDelegate()
/// let rightsManager = AlRightsManager()
/// rightsManager.validateAccessRights(rightIDs, completion: rightsDelegate)
///
/// \endcode<h2>Example 3 - Pull Payloads:</h2>
/// \code
/// guard let rightID = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
///
/// let payloadRequests = [AlPayloadsRequestData(propertyBag: "", payLoadArgs: nil)]
/// let payloadsRequest = AlPayloadsRequest(accessToken: "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.ZL82WtbyOfHmSk608CQjBluGhRc_r9Yo90QM1Kp1PE92EyE",
///                                        rightID: rightID,
///                                        payloadRequests: payloadRequests,
///                                        ignoreCache: true)
///
/// class AccessPayloadsDelegate: AlPullAccessPayloadsDelegate {
///    func success(_ response: AlPayloadsResponse) {
///        // Handle a successful response
///    }
///
///    func error(_ error: AlRequestError) {
///        // Handle an error response
///    }
/// }
///
/// let payloadsDelegate = AccessPayloadsDelegate()
/// let rightsManager = AlRightsManager()
/// rightsManager.pullAccessPayloads(payloadsRequest, completion: payloadsDelegate)
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS15AlRightsManager")
@interface AlRightsManager : NSObject
/// Construct a new access rights manager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Pull all access rights from the server
/// \param request <code>AlRightsRequest</code> request containing required information for this action
///
/// \param completion Listener callback to handle the result of this action <code>AlPullAccessRightsResponse</code>
///
- (void)pullAccessRights:(AlRightsRequest * _Nonnull)request completion:(id <AlPullAccessRightsDelegate> _Nonnull)completion;
/// Pull all access rights from the server and validate them
/// \param rightIDs <code>[UUID]</code> right IDs to be validated
///
/// \param completion Listener callback to handle the result of this action <code>AlValidateAccessRightsDelegate</code>
///
- (void)validateAccessRights:(NSArray<NSUUID *> * _Nonnull)rightIDs completion:(id <AlValidateAccessRightsDelegate> _Nonnull)completion;
/// Pull all access payloads for existing access rights from the server
/// \param request <code>AlPayloadsRequest</code> request containing required information for this action
///
/// \param completion Listener callback to handle the result of this action <code>AlPullAccessPayloadsResponse</code>
///
- (void)pullAccessPayloads:(AlPayloadsRequest * _Nonnull)request completion:(id <AlPullAccessPayloadsDelegate> _Nonnull)completion;
@end


/// Request class containing all information necessary to perform a
/// pull rights action on the server
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS15AlRightsRequest")
@interface AlRightsRequest : NSObject
/// Construct a new rights request
/// \param ignoreCache Ignore cached rights and pull from server
///
- (nonnull instancetype)initWithIgnoreCache:(BOOL)ignoreCache OBJC_DESIGNATED_INITIALIZER;
/// Ignore cached rights and pull from server.
@property (nonatomic, readonly) BOOL ignoreCache;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response class containing the results of a pull access rights
/// action and any supporting information about the request iteself
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS16AlRightsResponse")
@interface AlRightsResponse : NSObject
/// Construct a new rights response
/// \param rights An array of access rights [<code>AlRight</code>] returned from MAH
///
- (nonnull instancetype)initWithRights:(NSArray<AlRight *> * _Nonnull)rights OBJC_DESIGNATED_INITIALIZER;
/// An array of access rights [<code>AlRight</code>] returned from MAH
@property (nonatomic, readonly, copy) NSArray<AlRight *> * _Nonnull rights;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Mobile Access SDK initialization and configuration
/// <h2>Example:</h2>
/// \code
/// guard let subscriptionKey = UUID(uuidString: "38b76656-7eb4-41a5-a2ca-ac6dc761253d") else {
///    // Handle UUID construction error
/// }
/// AlSDKConfiguration.setConfig(AlConfig(subscriptionKey: subscriptionKey))
///
/// \endcodeYou should initialize the AlSDKConfiguration with your valid Allegion provided subscription key before using the SDK.
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS18AlSDKConfiguration")
@interface AlSDKConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sets the SDK Configuration config object
/// \param config <code>AlConfig</code>  configuration for the SDK
///
+ (void)setConfig:(AlConfig * _Nonnull)userConfig;
@end


/// Request class containing all information necessary to perform a
/// update payloads action on the server
SWIFT_CLASS("_TtC35Allegion_Access_MobileAccessSDK_iOS23AlUpdatePayloadsRequest")
@interface AlUpdatePayloadsRequest : NSObject
/// Construct a new update payloads request
/// \param accessToken Token to identify the user in MAH.
///
/// \param payloadTypes Type of payload [<code>AlPayloadType</code>] to retrieve.
///
/// \param rightIDs The identifier of the right associated with the desired payload.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nonnull)accessToken payloadTypes:(NSArray<NSNumber *> * _Nonnull)payloadTypes rightIDs:(NSArray<NSNumber *> * _Nonnull)rightIDs OBJC_DESIGNATED_INITIALIZER;
/// Token to identify the user in MAH.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
/// The identifier of the right associated with the desired payload.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull rightIDs;
- (NSArray<NSNumber *> * _Nonnull)getPayloadTypes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate that contains a dictionary of access rights validity or an error if a problem
/// is encoutered while trying to access rights from the server.
SWIFT_PROTOCOL("_TtP35Allegion_Access_MobileAccessSDK_iOS30AlValidateAccessRightsDelegate_")
@protocol AlValidateAccessRightsDelegate
/// successful response containing a dictionary of access rights validity
/// \param response <code>[UUID: Bool]</code> validity dictionary for access rights
///
- (void)success:(NSDictionary<NSUUID *, NSNumber *> * _Nonnull)response;
/// if an error occurred while trying to pull access rights
/// \param error <code>AlRequestError</code> error object containg specific error
///
- (void)error:(enum AlRequestError)error;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
