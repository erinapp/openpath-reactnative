// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Allegion_BLECore_iOS
@_exported import Allegion_BLECore_iOS
import Allegion_Extensions_iOS
import Allegion_Logging_iOS
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
public struct AlAdvertisement {
  public var deviceType: Allegion_BLECore_iOS.AlBLEDeviceType?
  public var serialNumber: Foundation.Data?
  public var engageSupported: Swift.Bool
  public var residentialSupported: Swift.Bool
  public var sapphireSupported: Swift.Bool
  public var engageSecurityVersion: Allegion_BLECore_iOS.AlSecurityVersion?
  public var sapphireSecurityVersion: Allegion_BLECore_iOS.AlSapphireSecurityVersion?
  public var engageStatus: Allegion_BLECore_iOS.AlEngageStatus?
  public var sapphireStatus: Allegion_BLECore_iOS.AlSapphireStatus?
}
extension Allegion_BLECore_iOS.AlAdvertisement : Swift.Equatable {
  public static func == (lhs: Allegion_BLECore_iOS.AlAdvertisement, rhs: Allegion_BLECore_iOS.AlAdvertisement) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class AlAdvertisementParser {
  public static func parseAdvertisement(data: [Swift.String : Any], subParsers: [Allegion_BLECore_iOS.AlParsing]) throws -> Allegion_BLECore_iOS.AlAdvertisement?
  @objc deinit
}
public enum AlBLEDeviceType {
  case swordfish
  case jaguar
  case krill
  case trident
  case gateway
  case marlin
  case leopard
  case denali
  case argos
  case barracuda
  case wifi
  case topaz
  case switchback
  case eSignoLock
  case eSignoReader
  case unknown
  public static func fromModelByte(_ byte: Swift.UInt8) -> Allegion_BLECore_iOS.AlBLEDeviceType
  public var deviceType: Swift.String {
    get
  }
  public var model: Swift.String {
    get
  }
  public static func == (a: Allegion_BLECore_iOS.AlBLEDeviceType, b: Allegion_BLECore_iOS.AlBLEDeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AlBLEError : Swift.Error {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AlCentralManager : ObjectiveC.NSObject {
  public static let shared: Allegion_BLECore_iOS.AlCentralManager
  public typealias ConnectCompletionHandler = ((Allegion_BLECore_iOS.AlConnectionResult) -> Swift.Void)
  public typealias ScanProgressHandler = ((_ newDiscoveries: [Allegion_BLECore_iOS.AlScanResponse]) -> Swift.Void)
  public typealias ScanCompletionHandler = ((_ result: Allegion_BLECore_iOS.AlScanResult) -> Swift.Void)
  public var advertisementParsers: [Allegion_BLECore_iOS.AlParsing]
  public var state: Allegion_BLECore_iOS.AlCentralManagerState
  public var stateDelegate: Allegion_BLECore_iOS.AlCentralStateTrackable?
  public var disconnectTrackable: Allegion_BLECore_iOS.AlDisconnectionTrackable!
  @objc deinit
  public func startScanWithDuration(_ duration: Foundation.TimeInterval = 3, updateDuplicates: Swift.Bool = false, progressHandler: Allegion_BLECore_iOS.AlCentralManager.ScanProgressHandler? = nil, completionHandler: Allegion_BLECore_iOS.AlCentralManager.ScanCompletionHandler? = nil) throws
  public func stopScan(_ error: Allegion_BLECore_iOS.AlScanError?)
  public func connect(timeout: Foundation.TimeInterval = 5.0, peripheral: Allegion_BLECore_iOS.AlPeripheral, completionHandler: @escaping (Allegion_BLECore_iOS.AlConnectionResult) -> Swift.Void)
  public func disconnect(peripheral: Allegion_BLECore_iOS.AlPeripheral)
  public func retrievePeripheralWithUUID(remoteUUID: Foundation.UUID) -> CoreBluetooth.CBPeripheral?
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public enum AlCentralManagerState {
  case unknown
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case scanning
  case notScanning
  public static func == (a: Allegion_BLECore_iOS.AlCentralManagerState, b: Allegion_BLECore_iOS.AlCentralManagerState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Allegion_BLECore_iOS.AlCentralManagerState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol AlCentralStateTrackable {
  func stateChanged(state: Allegion_BLECore_iOS.AlCentralManagerState)
}
public struct AlCharacteristic {
  public let name: Swift.String?
  public let UUID: Foundation.UUID
}
extension Allegion_BLECore_iOS.AlCharacteristic : Swift.Equatable {
  public static func == (lhs: Allegion_BLECore_iOS.AlCharacteristic, rhs: Allegion_BLECore_iOS.AlCharacteristic) -> Swift.Bool
}
public enum AlConnectionError : Allegion_BLECore_iOS.AlBLEError, Swift.Error {
  case connectionTimeoutError
  case genericError
  case peripheralNotFoundError
  public static func == (a: Allegion_BLECore_iOS.AlConnectionError, b: Allegion_BLECore_iOS.AlConnectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Allegion_BLECore_iOS.AlConnectionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum AlConnectionResult {
  case success(peripheral: CoreBluetooth.CBPeripheral)
  case error(error: Swift.Error)
}
public protocol AlDisconnectionTrackable {
  func didDisconnect(peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
public enum AlEngageStatus : Swift.UInt8 {
  case fdr
  case commissioned
  case unconnectable
  case linkRequestToGateway
  case connectionRequestToGateway
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class AlEngageV1Parser : Allegion_BLECore_iOS.AlParsing {
  public init()
  public func parse(_ data: [Swift.String : Any], advertisement: inout Allegion_BLECore_iOS.AlAdvertisement) throws
  public func matchFingerprint(_ data: Foundation.Data) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers public class AlEngageV2Parser : Allegion_BLECore_iOS.AlV2Parser {
  override public func parse(_ data: [Swift.String : Any], advertisement: inout Allegion_BLECore_iOS.AlAdvertisement) throws
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AlNoOpPeripheralTrackable : Allegion_BLECore_iOS.AlPeripheralTrackable {
  public func didDiscoverServices(peripheral: Allegion_BLECore_iOS.AlPeripheral, error: Swift.Error?)
  public func didDiscoverCharacteristics(peripheral: Allegion_BLECore_iOS.AlPeripheral, for service: CoreBluetooth.CBService, error: Swift.Error?)
  public func didWriteValue(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  public func didUpdateValue(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  public func didUpdateNotificationState(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc deinit
}
public protocol AlParsing {
  func parse(_ data: [Swift.String : Any], advertisement: inout Allegion_BLECore_iOS.AlAdvertisement) throws
  func matchFingerprint(_ data: Foundation.Data) -> Swift.Bool
}
public class AlPeripheral {
  public var peripheral: CoreBluetooth.CBPeripheral
  public var services: [CoreBluetooth.CBService]? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var UUID: Foundation.UUID {
    get
  }
  public var peripheralTrackable: Allegion_BLECore_iOS.AlPeripheralTrackable
  public var state: CoreBluetooth.CBPeripheralState {
    get
  }
  public init(peripheral: CoreBluetooth.CBPeripheral)
  public func discoverServices(serviceUUIDs: [CoreBluetooth.CBUUID]?)
  public func discoverCharacteristics(characteristicUUIDs: [CoreBluetooth.CBUUID]?, for service: CoreBluetooth.CBService)
  public func writeDataWithoutResponse(data: Foundation.Data, for characteristic: CoreBluetooth.CBCharacteristic)
  public func writeDataWithResponse(data: Foundation.Data, for characteristic: CoreBluetooth.CBCharacteristic)
  public func readCharacteristic(characteristic: CoreBluetooth.CBCharacteristic)
  public func setNotifyValue(enabled: Swift.Bool, for characteristic: CoreBluetooth.CBCharacteristic)
  public func getMTUSize(characteristicWriteType: CoreBluetooth.CBCharacteristicWriteType) -> Swift.Int
  @objc deinit
}
extension Allegion_BLECore_iOS.AlPeripheral : Swift.Equatable {
  public static func == (lhs: Allegion_BLECore_iOS.AlPeripheral, rhs: Allegion_BLECore_iOS.AlPeripheral) -> Swift.Bool
}
public protocol AlPeripheralTrackable {
  func didDiscoverServices(peripheral: Allegion_BLECore_iOS.AlPeripheral, error: Swift.Error?)
  func didDiscoverCharacteristics(peripheral: Allegion_BLECore_iOS.AlPeripheral, for service: CoreBluetooth.CBService, error: Swift.Error?)
  func didWriteValue(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  func didUpdateValue(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  func didUpdateNotificationState(peripheral: Allegion_BLECore_iOS.AlPeripheral, for characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@_inheritsConvenienceInitializers public class AlSapphireParser : Allegion_BLECore_iOS.AlV2Parser {
  override public func parse(_ data: [Swift.String : Any], advertisement: inout Allegion_BLECore_iOS.AlAdvertisement) throws
  override public init()
  @objc deinit
}
public enum AlSapphireSecurityVersion : Swift.UInt8 {
  case platinumV1
  case platinumV2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum AlSapphireStatus : Swift.UInt8 {
  case unconfigured
  case RENRequired
  case nearConnections
  case anyConnections
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum AlScanError : Allegion_BLECore_iOS.AlBLEError, Swift.Error {
  case genericError
  case handlerError
  case invalidAdvertisementError
  case managerNotSetError
  case managerBusyError
  case parserNotSetError
  case unauthorizedError
  case unsupportedError
  public static func == (a: Allegion_BLECore_iOS.AlScanError, b: Allegion_BLECore_iOS.AlScanError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Allegion_BLECore_iOS.AlScanError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct AlScanResponse {
  public let advertisement: Allegion_BLECore_iOS.AlAdvertisement
  public let peripheral: Allegion_BLECore_iOS.AlPeripheral
  public let RSSI: Swift.Int
  public init(advertisement: Allegion_BLECore_iOS.AlAdvertisement, peripheral: Allegion_BLECore_iOS.AlPeripheral, RSSI: Swift.Int)
}
public enum AlScanResult {
  case success(scanResults: [Allegion_BLECore_iOS.AlScanResponse])
  case error(error: Allegion_BLECore_iOS.AlScanError)
}
public enum AlSecurityVersion : Swift.UInt8 {
  case normal
  case sequenceNumbers
  case generalEncrypted
  case fragmented1KB
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct AlService {
  public let name: Swift.String?
  public let UUID: Foundation.UUID
  public let characteristics: [Allegion_BLECore_iOS.AlCharacteristic]
}
extension Allegion_BLECore_iOS.AlService : Swift.Equatable {
  public static func == (lhs: Allegion_BLECore_iOS.AlService, rhs: Allegion_BLECore_iOS.AlService) -> Swift.Bool
}
public class AlV2Parser : Allegion_BLECore_iOS.AlParsing {
  public init()
  public func parse(_ data: [Swift.String : Any], advertisement: inout Allegion_BLECore_iOS.AlAdvertisement) throws
  public func matchFingerprint(_ data: Foundation.Data) -> Swift.Bool
  @objc deinit
}
extension Allegion_BLECore_iOS.AlBLEDeviceType : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlBLEDeviceType : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlCentralManagerState : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlCentralManagerState : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlConnectionError : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlConnectionError : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlEngageStatus : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlEngageStatus : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlEngageStatus : Swift.RawRepresentable {}
extension Allegion_BLECore_iOS.AlSapphireSecurityVersion : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlSapphireSecurityVersion : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlSapphireSecurityVersion : Swift.RawRepresentable {}
extension Allegion_BLECore_iOS.AlSapphireStatus : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlSapphireStatus : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlSapphireStatus : Swift.RawRepresentable {}
extension Allegion_BLECore_iOS.AlScanError : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlScanError : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlSecurityVersion : Swift.Equatable {}
extension Allegion_BLECore_iOS.AlSecurityVersion : Swift.Hashable {}
extension Allegion_BLECore_iOS.AlSecurityVersion : Swift.RawRepresentable {}
